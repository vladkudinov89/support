version: '3'
services:

  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: digitalocean.com/php
    container_name: app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
      - queue
      - broadcasting

  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
    depends_on:
      - websocket
      - app
    networks:
      - app-network
      - broadcasting

  #MySQL Service
  db:
    image: mysql:5.7.22
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: your_mysql_root_password
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network
      - queue

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    links:
      - db:mysql
    ports:
      - 9191:80
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_USERNAME: root
      MYSQL_ROOT_PASSWORD: your_mysql_root_password
      SERVICE_TAGS: dev
      SERVICE_NAME: phpmyadmin
    networks:
      - app-network

  frontend:
    container_name: frontend
    build:
      dockerfile: ./docker/frontend/Dockerfile
      context: .
    volumes:
      - ./:/var/www
    working_dir: /var/www
    tty: true

  beanstalk:
    image: schickling/beanstalkd:latest
    networks:
      - queue

  redis:
    image: redis:5
    networks:
      - broadcasting

  websocket:
    build:
      dockerfile: ./docker/websocket/Dockerfile
      context: .
    working_dir: /myapp
    depends_on:
      - redis
    networks:
      - broadcasting
    volumes:
      - ./:/myapp

#Docker Networks
networks:
  queue:
  broadcasting:
  app-network:
    driver: bridge

#Volumes
volumes:
  dbdata:
    driver: local
